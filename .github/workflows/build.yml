name: UGC application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11"]

    steps:
      - name: Check out code
        uses: actions/checkout@v2
    
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f app/requirements.txt ]; then pip install -r app/requirements.txt; fi

      - name: Lint with wemake-python-styleguide
        run: |
          mkdir -p reports/flake8
          flake8 app/src/ --format=html --htmldir=reports/flake8 --config=flake8.cfg --exit-zero
        continue-on-error: true
      
      - name: Upload flake8 report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report-${{ matrix.python-version }}
          path: reports/flake8

      - name: Check types with mypy
        run: |
          mkdir -p reports/mypy
          mypy app/src/ --html-report reports/mypy --ignore-missing-imports || true
        continue-on-error: true
      
      - name: Upload mypy report
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report-${{ matrix.python-version }}
          path: reports/mypy

      - name: Run tests with Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose -f app/tests/functional/docker-compose.ci.yaml up --abort-on-container-exit
          docker-compose -f app/tests/functional/docker-compose.ci.yaml down

      - name: Upload pytest report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report-${{ matrix.python-version }}
          path: app/reports/pytest

  notify:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Send Telegram notification
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        REPO: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      run: |
        REPORTS_URL="https://github.com/$REPO/actions/runs/$RUN_ID"
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
          -d chat_id=$TELEGRAM_CHAT_ID \
          -d text="âœ… CI passed successfully for branch: $GITHUB_REF!

          Commit: ${{ github.event.head_commit.message }}
          Author: ${{ github.actor }}
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}

          ðŸ”— [View Reports]($REPORTS_URL)"